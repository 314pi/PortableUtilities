[Haskell]
lexer=haskell

keywords.0=name:keywords for Haskell 98::case class data default deriving do else hiding if \
import in infix infixl infixr instance let module \
newtype of then type where forall foreign

keywords.1=name:keywords for FFI::export label dynamic safe threadsafe \
unsafe stdcall ccall prim

style.33=name:LineNumbers,fore:clBlack,back:clSilver,font:Arial
style.34=name:Ok Braces,fore:clBlue,bold
style.35=name:Bad Braces,fore:clRed,bold
style.36=name:Control Chars,back:clSilver
style.37=name:Indent Guide,fore:clSilver
style.0=name:White Space
style.1=name:Identifier
style.2=name:Keyword,fore:clNavy,bold
style.3=name:Number,fore:clTeal
style.4=name:String,fore:clPurple
style.5=name:Character,fore:clPurple
style.6=name:Class
style.7=name:Module
style.8=name:Capital
style.9=name:Data
style.10=name:Import
style.11=name:Operator
style.12=name:Instance
style.13=name:Commentline,fore:clGreen
style.14=name:Commentblock,fore:clGreen
style.15=name:Commentblock 2,fore:clGreen
style.16=name:Commentblock 3,fore:clGreen

CommentBoxStart=/*
CommentBoxEnd=*/
CommentBoxMiddle=*
CommentBlock=//
CommentStreamStart=/*
CommentStreamEnd=*/
AssignmentOperator==
EndOfStatementOperator=;