[OCaml]
lexer=caml
keywords.0=name:Keywords Caml::and as assert asr begin class \
constraint do done downto else end \
exception external false for fun function \
functor if in include inherit initializer \
land lazy let lor lsl lsr \
lxor match method mod module mutable \
new object of open or private \
rec sig struct then to true \
try type val virtual when while \
with

keywords.1=name:Keywords Sml::abstype andalso and as case datatype div do \
else end eqtype exception \
false fn fun functor handle if infixr infix include in let local \
mod nonfix not of open op orelse raise rec \
sharing signature sig structure struct then true type use \
val while withtype with

keywords.2=name:Optional Caml Keywords::option Some None ignore ref lnot succ pred parser

keywords.3=name:Optional Sml Keywords::option SOME NONE ignore ref \
chr explode implode ord size

keywords.4=name:Optional Caml Keywords2::array bool char float int list string unit

keywords.5=name:Optional sml Keywords2::array bool char int list nil real string unit vector word

style.33=name:LineNumbers,fore:clBlack,back:clSilver,font:Arial
style.34=name:Ok Braces,fore:clBlue,bold
style.35=name:Bad Braces,fore:clRed,bold
style.36=name:Control Chars,back:clSilver
style.37=name:Indent Guide,fore:clSilver
style.0=name:White Space,fore:clGray
style.1=name:Identifiers,fore:clWindowText
style.2=name:Tag Names,back:#FFE0FF
style.3=name:Keywords,fore:clNavy,bold
style.4=name:Keywords 2,fore:clWindowText,back:#E0E0FF  
style.5=name:Keywords 3,fore:#A00000
style.6=name:Linenum Directive,fore:clWindowText,back:#C0C0C0
style.7=name:Operators,fore:clWindowText,back:clWindow,bold
style.8=name:Numbers,fore:clBlack,back:clSilver
style.9=name:Single quoted string,fore:clPurple
style.10=name:Embedded whitespaces,fore:clBlack,back:#e0e0e0 
style.11=name:Double quoted string,fore:clPurple
style.12=name:Comment (Not Nested),fore:clGreen
style.13=name:Comment (Singly Nested),fore:clGreen
style.14=name:Comment (Doubly Nested),fore:clGreen
style.15=name:Comment (Triply Nested),fore:clGreen

CommentBoxStart=(*
CommentBoxEnd=*)
CommentBoxMiddle=*
CommentBlock=//
CommentStreamStart=(*
CommentStreamEnd=*)
AssignmentOperator==
EndOfStatementOperator=;