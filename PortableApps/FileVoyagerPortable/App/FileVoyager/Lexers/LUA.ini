[LUA]
lexer=lua
keywords.0=name:Keywords::and break do else elseif end for function if in local nil not or repeat \
return then until while false true goto

keywords.1=name:Basic Functions::assert collectgarbage dofile error _G getmetatable ipairs loadfile next pairs \
pcall print rawequal rawget rawset setmetatable tonumber tostring type _VERSION \
xpcall string table math coroutine io os debug getfenv gcinfo load loadlib loadstring \
require select setfenv unpack _LOADED LUA_PATH _REQUIREDNAME package rawlen package bit32 _ENV

keywords.2=name:String| (table) & math functions::string.byte string.char string.dump string.find string.format string.gsub string.len string.lower string.rep string.sub string.upper \
table.concat table.insert table.remove table.sort math.abs math.acos math.asin math.atan math.atan2 \
math.ceil math.cos math.deg math.exp math.floor math.frexp math.ldexp math.log math.max math.min \
math.pi math.pow math.rad math.random math.randomseed math.sin math.sqrt math.tan \
string.gfind string.gmatch string.match string.reverse table.foreach table.foreachi table.getn table.setn \
table.maxn table.pack table.unpack math.cosh math.fmod math.huge math.log10 math.modf \
math.mod math.sinh math.tanh bit32.arshift bit32.band bit32.bnot bit32.bor bit32.btest \
bit32.bxor bit32.extract bit32.replace bit32.lrotate bit32.lshift bit32.rrotate bit32.rshift

keywords.3=name:(coroutines)| I/O & system facilities::coroutine.create coroutine.resume coroutine.status coroutine.wrap coroutine.yield \
io.close io.flush io.input io.lines io.open io.output io.read io.tmpfile io.type io.write \
io.stdin io.stdout io.stderr os.clock os.date os.difftime os.execute os.exit os.getenv os.remove os.rename os.setlocale os.time \
os.tmpname coroutine.running io.popen module package.loaders package.seeall package.config package.searchers package.searchpath \
require package.cpath package.loaded package.loadlib package.path package.preload

style.33=name:LineNumbers,fore:clBlack,back:clSilver,font:Arial
style.34=name:Ok Braces,fore:clBlue,bold
style.35=name:Bad Braces,fore:clRed,bold
style.36=name:Control Chars,back:clSilver
style.37=name:Indent Guide,fore:clSilver
style.0=name:White Space,fore:clRed
style.1=name:Block Comment (5.0),fore:#909090,back:#D0F0F0,eolfilled
style.2=name:Line Comment,fore:clGreen
style.4=name:Number,fore:clTeal
style.5=name:Keyword,fore:clNavy,bold
style.6=name:String,fore:clPurple
style.7=name:Char,fore:clPurple
style.8=name:Literal String,fore:clPurple,back:#E0FFFF,bold
style.9=name:Preprocessor (obsolete in Lua 4.0 and up),fore:#7F7F00
style.10=name:Operator,bold
style.11=name:Identifier
style.12=name:EOL when string not closed,fore:clWhite,back:#E0C0E0,eolfilled
style.13=name:Other Keywords 1 (testcolors),fore:clNavy,back:#D0FFD0,bold
style.14=name:Other Keywords 2 (testcolors),fore:clNavy,back:#D0D0FF,bold
style.15=name:Other Keywords 3 (testcolors),fore:clNavy,back:#FFD0D0,bold
style.16=name:Other Keywords 4 (testcolors),fore:clNavy,back:#FFD0FF,bold
style.17=name:Other Keywords 5 (testcolors),fore:clNavy,back:#FFFFD0,bold
style.18=name:Other Keywords 6 (testcolors),fore:clNavy,back:#FFA0A0,bold
style.19=name:Other Keywords 7 (testcolors),fore:clNavy,back:#FFD0D0,bold

CommentBoxStart=--[[
CommentBoxEnd=]]
CommentBoxMiddle=*
CommentBlock=--
CommentStreamStart=--[[
CommentStreamEnd=]]
AssignmentOperator==
EndOfStatementOperator=;